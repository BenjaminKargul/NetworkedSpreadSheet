<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SpreadsheetUtilities.DependencyGraph" -->
        <member name="T:SpreadsheetUtilities.DependencyGraph.DependencyNode">
            <summary>
            This class represents a node on the DependencyGraph.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DependencyNode.#ctor(System.String)">
            <summary>
            Constructs a new node associated with the input string.
            </summary>
            <param name="nodeName">Unique string to be associated with the new node.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DependencyNode.listDependents">
            <summary>
            Returns a list of the node's dependents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DependencyNode.listDependees">
            <summary>
            Returns a list of the node's dependees.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DependencyNode.addDependent(SpreadsheetUtilities.DependencyGraph.DependencyNode,System.Int32@)">
            <summary>
            Add a dependency where the input node is the dependent. The dependency is created both ways.
            (This node gets a reference to the dependent, and the dependent gets a reference to this node).
            
            Adjusts the size of the DependencyGraph accordingly.
            </summary>
            <param name="dependent">The node that becomes the dependent of the current node.</param>
            <param name="dependencySize">Reference to the DependencyGraph's size count.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DependencyNode.removeDependent(SpreadsheetUtilities.DependencyGraph.DependencyNode,System.Int32@)">
            <summary>
            Remove a dependency where the input node is the dependent. The dependency is removed both ways.
            (This node no longer has a reference to the dependent, and the dependent has no reference to this node).
            
            Adjusts the size of the DependencyGraph accordingly.
            </summary>
            <param name="dependent">The node that is the dependent of the current node</param>
            <param name="dependencySize">Reference to the DependencyGraph's size count</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DependencyNode.removeAllDependents(System.Int32@)">
            <summary>
            Removes the dependencies between this node and all the dependents.
            </summary>
            <param name="_size">Reference to the DependencyGraph's size count</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DependencyNode.removeAllDependees(System.Int32@)">
            <summary>
            Removes the dependencies between this node and all the dependees.
            </summary>
            <param name="_size"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s"> s must be evaluated first. T depends on S</param>
             <param name="t"> t cannot be evaluated until s is</param>        /// 
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.retrieveNode(System.String)">
            <summary>
            Retrieves a node that is associated with the string. If it doesn't exist on the graph, a new node is created and placed on the graph.
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(SpreadsheetUtilities.DependencyGraph.DependencyNode,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s">Dependee node</param>
             <param name="t">String associated with dependent node</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,SpreadsheetUtilities.DependencyGraph.DependencyNode)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s">String associated with dependee node</param>
             <param name="t">Dependent node</param>
        </member>
    </members>
</doc>
