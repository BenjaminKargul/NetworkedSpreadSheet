// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// assertSetString - Use 'assertSetStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void assertSetString()
        {
            #region Variable Declarations
            WinEdit uIBoxCellValueEdit = this.UINewSpreadsheetsprdWindow.UIBoxCellValueWindow.UIBoxCellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'boxCellValue' text box equals 'Hello'
            Assert.AreEqual(this.assertSetStringExpectedValues.UIBoxCellValueEditText, uIBoxCellValueEdit.Text, "BoxCellValue not displaying correct value!");
        }
        
        /// <summary>
        /// Launches the spreadsheet
        /// </summary>
        public void LaunchSpreadsheet()
        {

            // Launch '../../../bin/Debug/SpreadsheetProgram.exe'
            ApplicationUnderTest spreadsheetProgramApplication = ApplicationUnderTest.Launch(this.LaunchSpreadsheetParams.ExePath, this.LaunchSpreadsheetParams.AlternateExePath);
        }
        
        /// <summary>
        /// Check to see if the string is properly displayed on the spreadsheet.
        /// </summary>
        public void setString()
        {
            #region Variable Declarations
            WinEdit uIBoxCellContentsEdit = this.UINewSpreadsheetsprdWindow.UIBoxCellContentsWindow.UIBoxCellContentsEdit;
            WinButton uISetCellContentsButton = this.UINewSpreadsheetsprdWindow.UISetCellContentsWindow.UISetCellContentsButton;
            #endregion

            // Type 'Hello' in 'boxCellContents' text box
            uIBoxCellContentsEdit.Text = this.setStringParams.UIBoxCellContentsEditText;

            // Click 'Set Cell Contents' button
            Mouse.Click(uISetCellContentsButton, new Point(10, 15));
        }
        
        /// <summary>
        /// Sets the string and moves the cell around a couple times before going back to the original cell again.
        /// </summary>
        public void setStringMovedCells()
        {
            #region Variable Declarations
            WinEdit uIBoxCellContentsEdit = this.UINewSpreadsheetsprdWindow.UIBoxCellContentsWindow.UIBoxCellContentsEdit;
            WinButton uISetCellContentsButton = this.UINewSpreadsheetsprdWindow.UISetCellContentsWindow.UISetCellContentsButton;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetsprdWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type 'Hello' in 'boxCellContents' text box
            uIBoxCellContentsEdit.Text = this.setStringMovedCellsParams.UIBoxCellContentsEditText;

            // Click 'Set Cell Contents' button
            Mouse.Click(uISetCellContentsButton, new Point(42, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(146, 46));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(213, 43));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(219, 59));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(60, 42));
        }
        
        #region Properties
        public virtual assertSetStringExpectedValues assertSetStringExpectedValues
        {
            get
            {
                if ((this.massertSetStringExpectedValues == null))
                {
                    this.massertSetStringExpectedValues = new assertSetStringExpectedValues();
                }
                return this.massertSetStringExpectedValues;
            }
        }
        
        public virtual LaunchSpreadsheetParams LaunchSpreadsheetParams
        {
            get
            {
                if ((this.mLaunchSpreadsheetParams == null))
                {
                    this.mLaunchSpreadsheetParams = new LaunchSpreadsheetParams();
                }
                return this.mLaunchSpreadsheetParams;
            }
        }
        
        public virtual setStringParams setStringParams
        {
            get
            {
                if ((this.msetStringParams == null))
                {
                    this.msetStringParams = new setStringParams();
                }
                return this.msetStringParams;
            }
        }
        
        public virtual setStringMovedCellsParams setStringMovedCellsParams
        {
            get
            {
                if ((this.msetStringMovedCellsParams == null))
                {
                    this.msetStringMovedCellsParams = new setStringMovedCellsParams();
                }
                return this.msetStringMovedCellsParams;
            }
        }
        
        public UINewSpreadsheetsprdWindow UINewSpreadsheetsprdWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdWindow == null))
                {
                    this.mUINewSpreadsheetsprdWindow = new UINewSpreadsheetsprdWindow();
                }
                return this.mUINewSpreadsheetsprdWindow;
            }
        }
        #endregion
        
        #region Fields
        private assertSetStringExpectedValues massertSetStringExpectedValues;
        
        private LaunchSpreadsheetParams mLaunchSpreadsheetParams;
        
        private setStringParams msetStringParams;
        
        private setStringMovedCellsParams msetStringMovedCellsParams;
        
        private UINewSpreadsheetsprdWindow mUINewSpreadsheetsprdWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'assertSetString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class assertSetStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'boxCellValue' text box equals 'Hello'
        /// </summary>
        public string UIBoxCellValueEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LaunchSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LaunchSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '../../../bin/Debug/SpreadsheetProgram.exe'
        /// </summary>
        public string ExePath = "../../../bin/Debug/SpreadsheetProgram.exe";
        
        /// <summary>
        /// Launch '../../../bin/Debug/SpreadsheetProgram.exe'
        /// </summary>
        public string AlternateExePath = "../../../bin/Debug/SpreadsheetProgram.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'setString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class setStringParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'boxCellContents' text box
        /// </summary>
        public string UIBoxCellContentsEditText = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'setStringMovedCells'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class setStringMovedCellsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello' in 'boxCellContents' text box
        /// </summary>
        public string UIBoxCellContentsEditText = "Hello";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdWindow : WinWindow
    {
        
        public UINewSpreadsheetsprdWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "New Spreadsheet.sprd*";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public UIBoxCellContentsWindow UIBoxCellContentsWindow
        {
            get
            {
                if ((this.mUIBoxCellContentsWindow == null))
                {
                    this.mUIBoxCellContentsWindow = new UIBoxCellContentsWindow(this);
                }
                return this.mUIBoxCellContentsWindow;
            }
        }
        
        public UISetCellContentsWindow UISetCellContentsWindow
        {
            get
            {
                if ((this.mUISetCellContentsWindow == null))
                {
                    this.mUISetCellContentsWindow = new UISetCellContentsWindow(this);
                }
                return this.mUISetCellContentsWindow;
            }
        }
        
        public UIBoxCellValueWindow UIBoxCellValueWindow
        {
            get
            {
                if ((this.mUIBoxCellValueWindow == null))
                {
                    this.mUIBoxCellValueWindow = new UIBoxCellValueWindow(this);
                }
                return this.mUIBoxCellValueWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBoxCellContentsWindow mUIBoxCellContentsWindow;
        
        private UISetCellContentsWindow mUISetCellContentsWindow;
        
        private UIBoxCellValueWindow mUIBoxCellValueWindow;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBoxCellContentsWindow : WinWindow
    {
        
        public UIBoxCellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "boxCellContents";
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBoxCellContentsEdit
        {
            get
            {
                if ((this.mUIBoxCellContentsEdit == null))
                {
                    this.mUIBoxCellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBoxCellContentsEdit.WindowTitles.Add("New Spreadsheet.sprd*");
                    #endregion
                }
                return this.mUIBoxCellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBoxCellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISetCellContentsWindow : WinWindow
    {
        
        public UISetCellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonSetContents";
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public WinButton UISetCellContentsButton
        {
            get
            {
                if ((this.mUISetCellContentsButton == null))
                {
                    this.mUISetCellContentsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISetCellContentsButton.SearchProperties[WinButton.PropertyNames.Name] = "Set Cell Contents";
                    this.mUISetCellContentsButton.WindowTitles.Add("New Spreadsheet.sprd*");
                    #endregion
                }
                return this.mUISetCellContentsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISetCellContentsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBoxCellValueWindow : WinWindow
    {
        
        public UIBoxCellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "boxCellValue";
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBoxCellValueEdit
        {
            get
            {
                if ((this.mUIBoxCellValueEdit == null))
                {
                    this.mUIBoxCellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBoxCellValueEdit.WindowTitles.Add("New Spreadsheet.sprd*");
                    #endregion
                }
                return this.mUIBoxCellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBoxCellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("New Spreadsheet.sprd*");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
}
