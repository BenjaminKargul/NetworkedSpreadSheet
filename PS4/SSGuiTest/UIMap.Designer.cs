// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SSGuiTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Set the contents of a cell to a string, and see if the value box displays that string.
        /// </summary>
        public void SetContentsString()
        {
            #region Variable Declarations
            WinEdit uIBoxCellContentsEdit = this.UINewSpreadsheetsprdWindow.UIBoxCellContentsWindow.UIBoxCellContentsEdit;
            WinButton uISetCellContentsButton = this.UINewSpreadsheetsprdWindow.UISetCellContentsWindow.UISetCellContentsButton;
            #endregion

            // Type 'Hello There' in 'boxCellContents' text box
            uIBoxCellContentsEdit.Text = this.SetContentsStringParams.UIBoxCellContentsEditText;

            // Click 'Set Cell Contents' button
            Mouse.Click(uISetCellContentsButton, new Point(21, 9));
        }
        
        /// <summary>
        /// Assert that the contents of the box is "Hello There"
        /// </summary>
        public void AssertTextContents()
        {
            #region Variable Declarations
            WinEdit uIBoxCellValueEdit = this.UINewSpreadsheetsprdWindow.UIBoxCellValueWindow.UIBoxCellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'boxCellValue' text box equals 'Hello There'
            Assert.AreEqual(this.AssertTextContentsExpectedValues.UIBoxCellValueEditText, uIBoxCellValueEdit.Text, "CellValue textbox not properly set!");
        }
        
        #region Properties
        public virtual SetContentsStringParams SetContentsStringParams
        {
            get
            {
                if ((this.mSetContentsStringParams == null))
                {
                    this.mSetContentsStringParams = new SetContentsStringParams();
                }
                return this.mSetContentsStringParams;
            }
        }
        
        public virtual AssertTextContentsExpectedValues AssertTextContentsExpectedValues
        {
            get
            {
                if ((this.mAssertTextContentsExpectedValues == null))
                {
                    this.mAssertTextContentsExpectedValues = new AssertTextContentsExpectedValues();
                }
                return this.mAssertTextContentsExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UINewSpreadsheetsprdWindow UINewSpreadsheetsprdWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetsprdWindow == null))
                {
                    this.mUINewSpreadsheetsprdWindow = new UINewSpreadsheetsprdWindow();
                }
                return this.mUINewSpreadsheetsprdWindow;
            }
        }
        #endregion
        
        #region Fields
        private SetContentsStringParams mSetContentsStringParams;
        
        private AssertTextContentsExpectedValues mAssertTextContentsExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UINewSpreadsheetsprdWindow mUINewSpreadsheetsprdWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetContentsString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetContentsStringParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello There' in 'boxCellContents' text box
        /// </summary>
        public string UIBoxCellContentsEditText = "Hello There";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTextContents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertTextContentsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'boxCellValue' text box equals 'Hello There'
        /// </summary>
        public string UIBoxCellValueEditText = "Hello There";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetProgramexListItem UISpreadsheetProgramexListItem
        {
            get
            {
                if ((this.mUISpreadsheetProgramexListItem == null))
                {
                    this.mUISpreadsheetProgramexListItem = new UISpreadsheetProgramexListItem(this);
                }
                return this.mUISpreadsheetProgramexListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetProgramexListItem mUISpreadsheetProgramexListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetProgramexListItem : WinListItem
    {
        
        public UISpreadsheetProgramexListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetProgram.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheetsprdWindow : WinWindow
    {
        
        public UINewSpreadsheetsprdWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "New Spreadsheet.sprd*";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public UIBoxCellContentsWindow UIBoxCellContentsWindow
        {
            get
            {
                if ((this.mUIBoxCellContentsWindow == null))
                {
                    this.mUIBoxCellContentsWindow = new UIBoxCellContentsWindow(this);
                }
                return this.mUIBoxCellContentsWindow;
            }
        }
        
        public UISetCellContentsWindow UISetCellContentsWindow
        {
            get
            {
                if ((this.mUISetCellContentsWindow == null))
                {
                    this.mUISetCellContentsWindow = new UISetCellContentsWindow(this);
                }
                return this.mUISetCellContentsWindow;
            }
        }
        
        public UIBoxCellValueWindow UIBoxCellValueWindow
        {
            get
            {
                if ((this.mUIBoxCellValueWindow == null))
                {
                    this.mUIBoxCellValueWindow = new UIBoxCellValueWindow(this);
                }
                return this.mUIBoxCellValueWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBoxCellContentsWindow mUIBoxCellContentsWindow;
        
        private UISetCellContentsWindow mUISetCellContentsWindow;
        
        private UIBoxCellValueWindow mUIBoxCellValueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBoxCellContentsWindow : WinWindow
    {
        
        public UIBoxCellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "boxCellContents";
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBoxCellContentsEdit
        {
            get
            {
                if ((this.mUIBoxCellContentsEdit == null))
                {
                    this.mUIBoxCellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBoxCellContentsEdit.WindowTitles.Add("New Spreadsheet.sprd*");
                    #endregion
                }
                return this.mUIBoxCellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBoxCellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISetCellContentsWindow : WinWindow
    {
        
        public UISetCellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonSetContents";
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public WinButton UISetCellContentsButton
        {
            get
            {
                if ((this.mUISetCellContentsButton == null))
                {
                    this.mUISetCellContentsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISetCellContentsButton.SearchProperties[WinButton.PropertyNames.Name] = "Set Cell Contents";
                    this.mUISetCellContentsButton.WindowTitles.Add("New Spreadsheet.sprd*");
                    #endregion
                }
                return this.mUISetCellContentsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISetCellContentsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBoxCellValueWindow : WinWindow
    {
        
        public UIBoxCellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "boxCellValue";
            this.WindowTitles.Add("New Spreadsheet.sprd*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBoxCellValueEdit
        {
            get
            {
                if ((this.mUIBoxCellValueEdit == null))
                {
                    this.mUIBoxCellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBoxCellValueEdit.WindowTitles.Add("New Spreadsheet.sprd*");
                    #endregion
                }
                return this.mUIBoxCellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBoxCellValueEdit;
        #endregion
    }
}
